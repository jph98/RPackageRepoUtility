#!/usr/bin/env python

import subprocess
import os, sys
import re

# Pre-requisites:
# - Installation of multiple versions of r in "r_base_dir"
# Usage of R version in the directory name, e.g. R-2.13.1
base_r_dir="/opt/mango/R/"

# Execute command with arguments
def exec_cmd(args):
	p = subprocess.Popen(args, shell=False, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
	o, e = p.communicate()
	lines = []
	if o is not None:				
		lines = o.split("\n")	
	lines = [line for line in lines if line is not ""]
	return lines	 		

# args argument list from arbitrary function args
def build_arg_kw(*cmds):
	args = []
	for c in cmds:
		args.append(c)		
	return args

# Build argument list from a string
def build_arg_string(cmdstring):
	return cmdstring.split(" ")	

# Switch version:
# - R and Rscript on path
# - What about .rlibs and LD_LIBRARY_PATH?
def switch_to_location(location):
	exec_cmd(build_arg_string("unlink /usr/bin/R"))
	exec_cmd(build_arg_string("unlink /usr/bin/Rscript"))		
	exec_cmd(build_arg_string("ln -s " + location + "/bin/R /usr/bin/R"))	
	exec_cmd(build_arg_string("ln -s " + location + "/bin/Rscript /usr/bin/Rscript"))
	print "\nSwitched R to " + location + " \n"

# Find current version symlinked
def current_version(symlink):
	for o in symlink:		
		return re.search(r"/([0-9.]+)/", o).group(1)		

# List versions of R installed
def list_versions(outlist):
	
	out = exec_cmd(build_arg_string("ls -l /usr/bin/R"))
	version = current_version(out)

	if version is None:
		print "Could not find a current R, continuing..."

	print "\nFound R versions: "
	versions = {}
	idx = 1
	for o in outlist:		
	 	if o is not "": 
	 		if version is not None and version in o:
	 			versions[idx] = base_r_dir + o + " (current)"
	 		else:
	 			versions[idx] = base_r_dir + o
	 		print " [" + str(idx) + "] " + versions[idx]
	 	idx += 1
	
	return versions

# Allow user to switch package
def package_switch():
	args = build_arg_string("ls -1 " + base_r_dir)		
	out = exec_cmd(args)		
	versions = list_versions(out)

	version = raw_input("\nEnter Option (or return to skip): ")		
	if version is not "":
		try:
			location = versions[int(version)]
			switch_to_location(location)		
		except KeyError:
			print "Error locating version for: " + version

# Main method
if __name__ == "__main__":
	if not os.geteuid()==0:
		sys.exit("\nYou need to be root to run this script")
	else:
		package_switch()
